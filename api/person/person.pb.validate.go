// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/person/person.proto

package person

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreatePersonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	return nil
}

// CreatePersonRequestValidationError is the validation error returned by
// CreatePersonRequest.Validate if the designated constraints aren't met.
type CreatePersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePersonRequestValidationError) ErrorName() string {
	return "CreatePersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePersonRequestValidationError{}

// Validate checks the field values on CreatePersonReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreatePersonReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreatePersonReplyValidationError is the validation error returned by
// CreatePersonReply.Validate if the designated constraints aren't met.
type CreatePersonReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePersonReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePersonReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePersonReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePersonReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePersonReplyValidationError) ErrorName() string {
	return "CreatePersonReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePersonReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePersonReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePersonReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePersonReplyValidationError{}

// Validate checks the field values on UpdatePersonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	return nil
}

// UpdatePersonRequestValidationError is the validation error returned by
// UpdatePersonRequest.Validate if the designated constraints aren't met.
type UpdatePersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonRequestValidationError) ErrorName() string {
	return "UpdatePersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonRequestValidationError{}

// Validate checks the field values on GetPersonRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetPersonRequestValidationError is the validation error returned by
// GetPersonRequest.Validate if the designated constraints aren't met.
type GetPersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonRequestValidationError) ErrorName() string { return "GetPersonRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonRequestValidationError{}

// Validate checks the field values on PersonReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PersonReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	return nil
}

// PersonReplyValidationError is the validation error returned by
// PersonReply.Validate if the designated constraints aren't met.
type PersonReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonReplyValidationError) ErrorName() string { return "PersonReplyValidationError" }

// Error satisfies the builtin error interface
func (e PersonReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersonReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonReplyValidationError{}

// Validate checks the field values on ListPersonRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LastName

	return nil
}

// ListPersonRequestValidationError is the validation error returned by
// ListPersonRequest.Validate if the designated constraints aren't met.
type ListPersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonRequestValidationError) ErrorName() string {
	return "ListPersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonRequestValidationError{}

// Validate checks the field values on ListPersonReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPersonReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPersons() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPersonReplyValidationError{
					field:  fmt.Sprintf("Persons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPersonReplyValidationError is the validation error returned by
// ListPersonReply.Validate if the designated constraints aren't met.
type ListPersonReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonReplyValidationError) ErrorName() string { return "ListPersonReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPersonReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonReplyValidationError{}
